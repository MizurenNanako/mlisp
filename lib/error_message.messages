start: Tto

Ends in an error in state: 0.
start' -> . start [ # ]
The known suffix of the stack is as follows:
<empty>


start: Tstr Trp

Ends in an error in state: 1.
primary_expr -> Tstr . [ Tto Tstr Tlp Tlc Tlb Tid Ti64 Tf64 Teof ]
str -> Tstr . [ Tbind ]
The known suffix of the stack is as follows:
Tstr


start: Tlp Tto

Ends in an error in state: 2.
lambda_expr -> Tlp . separated_nonempty_list(Tcomma,param_)? Trp Tto expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
primary_expr -> Tlp . expr Trp [ Tto Tstr Trp Trc Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
Tlp


start: Tlc Tto

Ends in an error in state: 4.
primary_expr -> Tlc . separated_nonempty_list(Tcomma,expr)? Trc [ Tto Tstr Trp Trc Trb Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
Tlc


start: Tid Trb

Ends in an error in state: 5.
id -> Tid . [ Tcolon Tbind ]
primary_expr -> Tid . [ Tto Tstr Trp Trc Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
Tid


start: Tid Tcolon Tid Tin Tid Tto

Ends in an error in state: 14.
bind_expr -> id . Tbind expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
local_decl_expr -> id . Tcolon type_expr Tin local_decl_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
local_decl_expr -> id . Tcolon type_expr Teq expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id


start: Tlc Tid Tcolon Tto

Ends in an error in state: 15.
local_decl_expr -> id Tcolon . type_expr Tin local_decl_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
local_decl_expr -> id Tcolon . type_expr Teq expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon


start: Tid Tcolon Tlp Tto

Ends in an error in state: 16.
type_expr -> Tlp . type_expr Trp [ Tstr Trp Trb Tlp Tlc Tin Tid Ti64 Tf64 Teq Teof Tcomma ]
The known suffix of the stack is as follows:
Tlp


start: Tid Tcolon Tlb Tto

Ends in an error in state: 17.
type_expr -> Tlb . separated_nonempty_list(Tcomma,type_expr)? Trb Tto type_expr [ Tstr Trp Trb Tlp Tlc Tin Tid Ti64 Tf64 Teq Teof Tcomma ]
The known suffix of the stack is as follows:
Tlb


start: Tid Tcolon Tlb Tid Tto

Ends in an error in state: 19.
separated_nonempty_list(Tcomma,type_expr) -> type_expr . [ Trb ]
separated_nonempty_list(Tcomma,type_expr) -> type_expr . Tcomma separated_nonempty_list(Tcomma,type_expr) [ Trb ]
The known suffix of the stack is as follows:
type_expr


start: Tid Tcolon Tlb Tid Tcomma Tto

Ends in an error in state: 20.
separated_nonempty_list(Tcomma,type_expr) -> type_expr Tcomma . separated_nonempty_list(Tcomma,type_expr) [ Trb ]
The known suffix of the stack is as follows:
type_expr Tcomma


start: Tid Tcolon Tlb Trb Tstr

Ends in an error in state: 25.
type_expr -> Tlb separated_nonempty_list(Tcomma,type_expr)? Trb . Tto type_expr [ Tstr Trp Trb Tlp Tlc Tin Tid Ti64 Tf64 Teq Teof Tcomma ]
The known suffix of the stack is as follows:
Tlb separated_nonempty_list(Tcomma,type_expr)? Trb


start: Tid Tcolon Tlb Trb Tto Tto

Ends in an error in state: 26.
type_expr -> Tlb separated_nonempty_list(Tcomma,type_expr)? Trb Tto . type_expr [ Tstr Trp Trb Tlp Tlc Tin Tid Ti64 Tf64 Teq Teof Tcomma ]
The known suffix of the stack is as follows:
Tlb separated_nonempty_list(Tcomma,type_expr)? Trb Tto


start: Tid Tcolon Tlp Tid Tto

Ends in an error in state: 28.
type_expr -> Tlp type_expr . Trp [ Tstr Trp Trb Tlp Tlc Tin Tid Ti64 Tf64 Teq Teof Tcomma ]
The known suffix of the stack is as follows:
Tlp type_expr


start: Tlc Tid Tcolon Tid Tto

Ends in an error in state: 30.
local_decl_expr -> id Tcolon type_expr . Tin local_decl_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
local_decl_expr -> id Tcolon type_expr . Teq expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr


start: Tid Tcolon Tid Tin Tto

Ends in an error in state: 31.
local_decl_expr -> id Tcolon type_expr Tin . local_decl_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr Tin


start: Tid Tcolon Tid Teq Tto

Ends in an error in state: 34.
local_decl_expr -> id Tcolon type_expr Teq . expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr Teq


start: Tid Tcolon Tid Teq Tf64 Trp

Ends in an error in state: 35.
local_decl_expr -> id Tcolon type_expr Teq expr . Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr Teq expr


start: Tid Tcolon Tid Teq Tf64 Tin Tto

Ends in an error in state: 36.
local_decl_expr -> id Tcolon type_expr Teq expr Tin . expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr Teq expr Tin


start: Tf64 Tto Tid Tbar Tto

Ends in an error in state: 39.
cond_rev -> cond_rev Tbar . cond_ [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
cond_rev Tbar


start: Tf64 Tlb Tlp Tto

Ends in an error in state: 40.
primary_expr -> Tlp . expr Trp [ Tto Tstr Trp Trc Trb Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
Tlp


start: Tlp Tf64 Trc

Ends in an error in state: 41.
primary_expr -> Tlp expr . Trp [ Tto Tstr Trp Trc Trb Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
Tlp expr


start: Tf64 Trb

Ends in an error in state: 46.
call_expr -> call_expr . Tlb separated_nonempty_list(Tcomma,call_expr)? Trb [ Tto Tstr Trp Trc Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma ]
cond_ -> call_expr . Tto call_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
cond_expr -> call_expr . [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
call_expr


start: Tf64 Tto Tto

Ends in an error in state: 47.
cond_ -> call_expr Tto . call_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
call_expr Tto


start: Tf64 Tto Tid Trb

Ends in an error in state: 49.
call_expr -> call_expr . Tlb separated_nonempty_list(Tcomma,call_expr)? Trb [ Tstr Trp Trc Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
cond_ -> call_expr Tto call_expr . [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
call_expr Tto call_expr


start: Tf64 Tlb Tto

Ends in an error in state: 50.
call_expr -> call_expr Tlb . separated_nonempty_list(Tcomma,call_expr)? Trb [ Tto Tstr Trp Trc Trb Tlp Tlc Tlb Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
call_expr Tlb


start: Tf64 Tlb Tid Teq

Ends in an error in state: 54.
call_expr -> call_expr . Tlb separated_nonempty_list(Tcomma,call_expr)? Trb [ Trb Tlb Tcomma ]
separated_nonempty_list(Tcomma,call_expr) -> call_expr . [ Trb ]
separated_nonempty_list(Tcomma,call_expr) -> call_expr . Tcomma separated_nonempty_list(Tcomma,call_expr) [ Trb ]
The known suffix of the stack is as follows:
call_expr


start: Tf64 Tlb Tid Tcomma Tto

Ends in an error in state: 55.
separated_nonempty_list(Tcomma,call_expr) -> call_expr Tcomma . separated_nonempty_list(Tcomma,call_expr) [ Trb ]
The known suffix of the stack is as follows:
call_expr Tcomma


start: Tf64 Tto Tid Tbar Tid Trb

Ends in an error in state: 58.
call_expr -> call_expr . Tlb separated_nonempty_list(Tcomma,call_expr)? Trb [ Tto Tlb ]
cond_ -> call_expr . Tto call_expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma Tbar ]
The known suffix of the stack is as follows:
call_expr


start: Tlc Tid Tbind Tto

Ends in an error in state: 59.
bind_expr -> id Tbind . expr Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tbind


start: Tlc Tid Tbind Tf64 Trp

Ends in an error in state: 60.
bind_expr -> id Tbind expr . Tin expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tbind expr


start: Tid Tbind Tf64 Tin Tto

Ends in an error in state: 61.
bind_expr -> id Tbind expr Tin . expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
id Tbind expr Tin


start: Tlc Tf64 Trp

Ends in an error in state: 63.
separated_nonempty_list(Tcomma,expr) -> expr . [ Trc ]
separated_nonempty_list(Tcomma,expr) -> expr . Tcomma separated_nonempty_list(Tcomma,expr) [ Trc ]
The known suffix of the stack is as follows:
expr


start: Tlc Tf64 Tcomma Tto

Ends in an error in state: 64.
separated_nonempty_list(Tcomma,expr) -> expr Tcomma . separated_nonempty_list(Tcomma,expr) [ Trc ]
The known suffix of the stack is as follows:
expr Tcomma


start: Tlp Tid Tcolon Tid Tcomma Tid Tcolon Tid Tto

Ends in an error in state: 67.
separated_nonempty_list(Tcomma,param_) -> param_ . [ Trp ]
separated_nonempty_list(Tcomma,param_) -> param_ . Tcomma separated_nonempty_list(Tcomma,param_) [ Trp ]
The known suffix of the stack is as follows:
param_


start: Tlp Tid Tcolon Tid Tcomma Tto

Ends in an error in state: 68.
separated_nonempty_list(Tcomma,param_) -> param_ Tcomma . separated_nonempty_list(Tcomma,param_) [ Trp ]
The known suffix of the stack is as follows:
param_ Tcomma


start: Tlp Tid Tcolon Tid Tcomma Tid Tto

Ends in an error in state: 70.
param_ -> id . Tcolon type_expr [ Trp Tcomma ]
The known suffix of the stack is as follows:
id


start: Tlp Tid Tcolon Tid Tcomma Tid Tcolon Tto

Ends in an error in state: 71.
param_ -> id Tcolon . type_expr [ Trp Tcomma ]
The known suffix of the stack is as follows:
id Tcolon


start: Tlp Trp Tstr

Ends in an error in state: 74.
lambda_expr -> Tlp separated_nonempty_list(Tcomma,param_)? Trp . Tto expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
Tlp separated_nonempty_list(Tcomma,param_)? Trp


start: Tlp Trp Tto Tto

Ends in an error in state: 75.
lambda_expr -> Tlp separated_nonempty_list(Tcomma,param_)? Trp Tto . expr [ Tstr Trp Trc Tlp Tlc Tin Tid Ti64 Tf64 Teof Tcomma ]
The known suffix of the stack is as follows:
Tlp separated_nonempty_list(Tcomma,param_)? Trp Tto


start: Tlp Tid Tcolon Tto

Ends in an error in state: 78.
local_decl_expr -> id Tcolon . type_expr Tin local_decl_expr [ Trp ]
local_decl_expr -> id Tcolon . type_expr Teq expr Tin expr [ Trp ]
param_ -> id Tcolon . type_expr [ Trp Tcomma ]
The known suffix of the stack is as follows:
id Tcolon


start: Tlp Tid Tcolon Tid Tto

Ends in an error in state: 79.
local_decl_expr -> id Tcolon type_expr . Tin local_decl_expr [ Trp ]
local_decl_expr -> id Tcolon type_expr . Teq expr Tin expr [ Trp ]
param_ -> id Tcolon type_expr . [ Trp Tcomma ]
The known suffix of the stack is as follows:
id Tcolon type_expr


start: Tf64 Trp

Ends in an error in state: 80.
list(top_expr) -> top_expr . list(top_expr) [ Teof ]
The known suffix of the stack is as follows:
top_expr


start: Tstr Tbind Tto

Ends in an error in state: 83.
export_expr -> str Tbind . id [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
str Tbind


start: Tid Tcolon Tto

Ends in an error in state: 87.
decl_expr -> id Tcolon . type_expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
decl_expr -> id Tcolon . str type_expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
local_decl_expr -> id Tcolon . type_expr Tin local_decl_expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
local_decl_expr -> id Tcolon . type_expr Teq expr Tin expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
id Tcolon


start: Tid Tcolon Tid Tto

Ends in an error in state: 89.
decl_expr -> id Tcolon type_expr . [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
local_decl_expr -> id Tcolon type_expr . Tin local_decl_expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
local_decl_expr -> id Tcolon type_expr . Teq expr Tin expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
id Tcolon type_expr


start: Tid Tcolon Tstr Tto

Ends in an error in state: 90.
decl_expr -> id Tcolon str . type_expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
id Tcolon str


start: Tid Tbind Tto

Ends in an error in state: 92.
bind_expr -> id Tbind . expr Tin expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
top_bind_expr -> id Tbind . expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
id Tbind


start: Tid Tbind Tf64 Trp

Ends in an error in state: 93.
bind_expr -> id Tbind expr . Tin expr [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
top_bind_expr -> id Tbind expr . [ Tstr Tlp Tlc Tid Ti64 Tf64 Teof ]
The known suffix of the stack is as follows:
id Tbind expr
